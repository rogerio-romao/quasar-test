export default function () {
  return {
    projects: [
      {
        id: 1,
        name: "Converse",
        type: "Front-End",
        shortDesc: "A responsive units conversion app.",
        technologies: ["Javascript", "JQuery", "CSS3", "HTML5"],
        image: require("../../assets/converse.png"),
        source: "https://codepen.io/rogerio-romao/pen/RwPaaRR",
        live: "https://codepen.io/rogerio-romao/full/RwPaaRR",
        longDesc:
          "Unit Conversion Program, does distances, weights and temperatures. Sleek flat style design and attention to user experience were my focus, as well as functional and well structured and documented code. Built using JQuery.",
        showDetails: true,
        details: {
          head: "This was the first app i created from scratch since coming back to coding, without following any tutorials. I had the idea and started by thinking about the interface and selecting a pleasing color scheme and coming up with the layout and the name. There is an animation on the title/logo h1 that conveys the idea of conversion. There are svg icons for the different types of conversion with custom tooltips to indicate what they do. The select boxes are also super customized and look great in my opinion. CSS was done from scratch, no CSS frameworks. I coded it using Sass and variables for easy modification and flexibility. The app works well at any screen size via media queries. I used jQuery for the DOM stuff and the javascript is all commented out to explain what the code does. The rest was just researching the conversion rates and implementing the inputs and a lot of conversion functions.",
          images1: [
            require("../../assets/converse-details1.png"),
            require("../../assets/converse-details2.png"),
            require("../../assets/converse-details3.png"),
            require("../../assets/converse-details4.png"),
          ],
        },
      },
      {
        id: 2,
        name: "Todo-List",
        type: "Front-End",
        shortDesc: "A todo list App made with JQuery.",
        technologies: ["Javascript", "JQuery", "CSS3", "HTML5"],
        image: require("../../assets/todov3.png"),
        source: "https://codepen.io/rogerio-romao/pen/KKpzXeG",
        live: "https://codepen.io/rogerio-romao/full/KKpzXeG",
        longDesc:
          "This project uses Sass for the presentation side of things, which i worked a lot on and am pretty happy with. I use variables to make it easier, and implemented a theming functionality. Learnt how to include a drag and drop functionality to the interface as well, after researching settle on JQuery for that. App is responsive using media queries.",
        showDetails: true,
        details: {
          head: "The inevitable todo list app. I mostly wanted to explore the interface building side of things, with theming, pleasing color schemes and nice UI, with drag and drop reordering of the list items. It's done without frameworks but with jQuery to facilitate the DOM manipulation. The app is responsive and animates when changing sizes. Dark and light themes provided. CSS using Sass and variables.",
          images1: [
            require("../../assets/todov3-details1.png"),
            require("../../assets/todov3-details2.png"),
            require("../../assets/todov3-details3.png"),
          ],
        },
      },
      {
        id: 3,
        name: "Markdown Editor / Previewer",
        type: "Front-End",
        shortDesc:
          "An app where you can write Markdown language and see the rendered result",
        technologies: ["Javascript", "CSS3", "HTML5"],
        image: require("../../assets/markdown-preview.png"),
        source: "https://codepen.io/rogerio-romao/pen/dyoXWNb",
        live: "https://codepen.io/rogerio-romao/full/dyoXWNb",
        longDesc:
          "A Markdown language editor / previewer app coded from scratch using a couple npm packages.",
        showDetails: false,
      },
      {
        id: 4,
        name: "Rock Paper Scissors",
        type: "Front-End",
        shortDesc: "A play on the classic game",
        technologies: ["Javascript", "CSS3", "HTML5"],
        image: require("../../assets/rock-paper-scissors.png"),
        source: "https://codepen.io/rogerio-romao/pen/jObOzRN",
        live: "https://codepen.io/rogerio-romao/pen/jObOzRN",
        longDesc:
          "Someone was playing this on a movie I was watching, and I set out to try to program this game, as fast as possible as a challenge, this was roughly 2hrs work.",
        showDetails: false,
      },
      {
        id: 5,
        name: "Pomodoro Clock",
        type: "Front-End",
        shortDesc: "Pomodoro Session Clock",
        technologies: ["Javascript", "CSS3", "HTML5"],
        image: require("../../assets/pomodoro.png"),
        source: "https://codepen.io/rogerio-romao/pen/rNVPBJv",
        live: "https://codepen.io/rogerio-romao/pen/rNVPBJv",
        longDesc:
          "A timer app with session and break intervals, dealing with the complexities of time and interval management in coding. There is a session timer and a break timer and the cycle through continuously, with independent intervals, and with a beep everytime a timer runs out. The interface colors switch as well between session and break.",
        showDetails: true,
        details: {
          head: "This was coded for the FreeCodeCamp front end certification challenges. We are given some user stories and have to build the app to pass a test suite that meets all those stories. I coded it in plain vanilla JS, the biggest challenge was to keep two separate timers with different intervals syncronised and cycling through seamlessly, and in the end i was pretty satisfied with how it turned out.",
          images1: [
            require("../../assets/pomodoro-details1.png"),
            require("../../assets/pomodoro-details2.png"),
          ],
        },
      },
      {
        id: 6,
        name: "Guess the Number game",
        type: "Front-End",
        shortDesc: "Guess the number game.",
        technologies: ["Javascript", "CSS3", "HTML5"],
        image: require("../../assets/guess-number.png"),
        source: "https://codepen.io/rogerio-romao/pen/XWbQbbN",
        live: "https://codepen.io/rogerio-romao/pen/XWbQbbN",
        longDesc:
          "My take on the common programming challenge of Guess the Number game. I tried to push this simple problem into as much of a polished app as possible with attention to all details, a nice visualizer pattern for the guesses, automatic adjustment of the maximum guesses determined by the max number chosen by the user and a nice clean interface.",
        showDetails: true,
        details: {
          head: "I paid a lot of attention to the interface on this one, really like the color scheme and the flat style design. The app responds very well at any screen size. There is a cool visualizer that shows your guesses and if you are high or low or correct, with a nice animation on the squares. The inputs are validated to correct type and range. The max number of guesses is calculated dynamically based on the user set max value, which also adjust the size of the squares on the visualizer.",
          images1: [
            require("../../assets/guess-number-details1.png"),
            require("../../assets/guess-number-details2.png"),
            require("../../assets/guess-number-details3.png"),
            require("../../assets/guess-number-details4.png"),
          ],
        },
      },
      {
        id: 7,
        name: "The Collatz Sequence",
        type: "Front-End",
        shortDesc: "A visualizer tool for the famous math sequence.",
        technologies: ["Canvas", "Animation", "Javascript", "CSS3", "HTML5"],
        image: require("../../assets/collatz.png"),
        source: "https://codepen.io/rogerio-romao/pen/WNQxaWq",
        live: "https://codepen.io/rogerio-romao/full/WNQxaWq",
        longDesc:
          "This was mainly about trying to develop working with canvas, animation and requestanimationframe. I used a math sequence as the base to program a graph engine on canvas that adjusts to the kind of data it is receiving. Fully commented out code as to how it works.",
        showDetails: true,
        details: {
          head: "An article about the mathematical Collatz Sequence caught my attention and i thought it would be interesting and a fun challenge to create a visualizer for it. The user selects the starting number and then a graph animates the progression of the sequence. There is a lot of clever calculations going on in the background. The whole sequence is pre-rendered in memory to access certain variables, and the animation scales in both time and vertical scale depending on the input and output, with graphics laid out on top of the graph at the end with certain key statistic values.",
          images1: [
            require("../../assets/collatz-details1.png"),
            require("../../assets/collatz-details2.png"),
          ],
        },
      },
      {
        id: 8,
        name: "The Spiral",
        type: "Front-End",
        shortDesc: "A JS music player / visualiser / generative art",
        technologies: ["Canvas", "Animation", "Javascript", "CSS3", "HTML5"],
        image: require("../../assets/spiral.png"),
        source: "https://codepen.io/rogerio-romao/pen/mdevOwm",
        live: "https://codepen.io/rogerio-romao/full/mdevOwm",
        longDesc:
          "Very proud of this one, programmed from scratch, pushing the envelope with animation and canvas, custom functions including a stagger using requestanimationframe, and a custom music player. Winner of a Codepen Pick! Also works as a standalone desktop app, planning to have this for sale in App Store.",
        showDetails: true,
        details: {
          head: "This is a large project (5k+ lines of code). It started out from an idea of recreating the old music player Winamp's visualiser, that showed some generative art while you listened to your songs. I started small with just the generative art part, researching and playing with techniques i could use in JS with the canvas element, and came up with a few algorithms. Then i devised a way to connect all the algorithms together in one shell, transition between them, and make them evolve. After that i started working on a music player and then added that to the shell, keeping it small and simple but stable, as the focus is on the art. All the while i kept having more ideas for algorithms, and it now has 50 of them, each doing a different thing. After that, i researched Electron to convert this browser based thing into a desktop app, and it works now in Mac or Win pc's, with further testing still to be done for mobile platforms. I intend to publish it as a paid app. It has got several Codepen Pick of the Day awards, one for the main app itself, and a few on individual algorithms!",
          images1: [
            require("../../assets/spiral-details1.png"),
            require("../../assets/spiral-details2.png"),
            require("../../assets/spiral-details3.png"),
            require("../../assets/spiral-details4.png"),
            require("../../assets/spiral-details5.png"),
          ],
          body: "Being such a big code base, i have worked on making the code as clear, documented, functional and practical as possible. Each algorithm is it's own class, and there is only one instance variable being used for all of them, since no two algorithms run at the same time. Common functions and helper methods than many of the classes may use have all been extracted to their own functions so they can be easily maintained and reused. The music player is decoupled from the generative art part and one can run independent of the other. The music player looks purposely very simple but has all the necessary features for listening to music while using the app. The interface is minimal, as suitable for this kind of program, but there is a help screen, a dashboard messages system, and hiding / showing the music player as well as many key controls to change the behaviour of the generative art.",
          images2: [
            require("../../assets/spiral-details6.png"),
            require("../../assets/spiral-details7.png"),
            require("../../assets/spiral-details8.png"),
            require("../../assets/spiral-details9.png"),
            require("../../assets/spiral-details10.png"),
            require("../../assets/spiral-details11.png"),
            require("../../assets/spiral-details12.png"),
            require("../../assets/spiral-details13.png"),
            require("../../assets/spiral-details14.png"),
            require("../../assets/spiral-details15.png"),
          ],
          footer:
            "Other notable features include not repeating algorithms, auto adjusting to screen size and fullscreen mode, manual or automatic changing of algorithms (with duration controls), music playlist auto-scrolling on track changes, several transition modes triggered at random on algorithm changes, progress bar on the music player with skipping and Ion Icons for the buttons. There is a stunning variety of visuals and you can spend hours without seeing the same thing twice, as there are millions of variations.",
          images3: [
            require("../../assets/spiral-details16.png"),
            require("../../assets/spiral-details17.png"),
            require("../../assets/spiral-details18.png"),
            require("../../assets/spiral-details19.png"),
            require("../../assets/spiral-details20.png"),
            require("../../assets/spiral-details21.png"),
            require("../../assets/spiral-details22.png"),
            require("../../assets/spiral-details23.png"),
            require("../../assets/spiral-details24.png"),
            require("../../assets/spiral-details25.png"),
          ],
        },
      },
      {
        id: 9,
        name: "Game of Life",
        type: "Front-End",
        shortDesc: "My version of the classic Conway's Game of Life",
        technologies: ["Canvas", "Animation", "Javascript", "CSS3", "HTML5"],
        image: require("../../assets/gol.png"),
        source: "https://codepen.io/rogerio-romao/pen/VwvbdZE",
        live: "https://codepen.io/rogerio-romao/full/VwvbdZE",
        longDesc:
          "This was an entry for a Game of Life challenge in Codepen. Programmed a version of the classic game of life, with a feature to draw your own patterns, and learned a lot while doing so!",
        showDetails: false,
      },
      {
        id: 10,
        name: "The Randomizer",
        type: "Full-Stack",
        shortDesc:
          "An app that gives you a random value on different categories.",
        technologies: [
          "Vue",
          "Vuetify",
          "API's",
          "Javascript",
          "CSS3",
          "HTML5",
        ],
        image: require("../../assets/randomizer.png"),
        source: "https://codepen.io/rogerio-romao/pen/Baoqvmm",
        live: "https://codepen.io/rogerio-romao/full/Baoqvmm",
        longDesc:
          "This is an app that has several categories like countries, colors, number, music keys etc, and the app will get a random value from them. App built in VueJS with Vuetify for the interface, and using a couple of API's for some of the categories.",
        showDetails: true,
        details: {
          head: "In programming or just in certain life situations, I often find myself in need of a random number so, as programmers do, i decided to build a program to do that for me. I also wanted to explore the Google Material Design trend for front-end apps, and since i was using Vue for this, i went with Vuetify. It's a great component library and it looks great, plus it has great documentation. Also doing custom validation on the inputs. I got carried away and ended up creating randomizers for letters, music keys (i do some music production as a hobby, too!), colors - very handy sometimes for web design - and explored a couple api's as well, one that gives you a random country (next holiday destination, anyone?), which is GraphQL based, and the other, REST based api gives you a Chuck Norris joke - they are kinda weak to be honest.",
          images1: [
            require("../../assets/randomizer-details1.png"),
            require("../../assets/randomizer-details2.png"),
            require("../../assets/randomizer-details3.png"),
            require("../../assets/randomizer-details4.png"),
          ],
        },
      },
      {
        id: 11,
        name: "Music Player",
        type: "Front-End",
        shortDesc: "A javascript music player. Simple but beautiful and solid.",
        technologies: ["Javascript", "CSS3", "HTML5"],
        image: require("../../assets/music-player.png"),
        source: "https://codepen.io/rogerio-romao/pen/vYNvBzd",
        live: "https://codepen.io/rogerio-romao/full/vYNvBzd",
        longDesc:
          "I wanted to program something similar to Winamp in Javascript and learn how to handle audio on the web. I am very pleased with the look and functionality i managed to include, and have some ideas to expand it in the future.",
        showDetails: true,
        details: {
          head: "This is a nice music player with pleasing aesthetics, that uses the File API to grab music files from your system and put them in a playlist. The playlist section dimensions itself to the tracks up to a maximum size, and then scrolls after that. On track changes, it auto scrolls to put the currently playing track in focus. There is also a minimized mode and it is responsive. The button actions all have checks and safeguards to make sure everything works properly and the interface is synced with the state. The code for this music player was then adapted to be included in my other project The Spiral that you can also see on my portfolio.",
          images1: [
            require("../../assets/music-player-details1.png"),
            require("../../assets/music-player-details2.png"),
            require("../../assets/music-player-details3.png"),
            require("../../assets/music-player-details4.png"),
          ],
        },
      },
      {
        id: 12,
        name: "Password Generator",
        type: "Front-End",
        shortDesc: "An app to create random secure pesswords.",
        technologies: ["Vue", "Vuetify", "Javascript", "CSS3", "HTML5"],
        image: require("../../assets/password-gen.png"),
        source: "https://codepen.io/rogerio-romao/pen/poyoWKw",
        live: "https://codepen.io/rogerio-romao/full/poyoWKw",
        longDesc:
          "Constructed using Vue and Vuetify. Select the length of the password you want to generate and if you want numbers and/or special characters included. You also get a handy button to copy the password to clipboard.",
        showDetails: true,
        details: {
          head: "These days, whenever I need an app to do something, I just go ahead and build it myself. Wanting to change some of my passwords to something more secure, i built this using Vue / Vuetify in a couple of hours. I really like Vuetify's components easy configurability via props, cutting down a lot on the amount of css you need. You can select the number of characters, and wether to use numbers and special symbols, as required per each password. Once it is generated, you have a handy button to copy it straight to the computer's clipboard for pasting. Don't forget to hit save password on your browser as these will be hard to remember! Or you can just generate another one.",
          images1: [
            require("../../assets/password-gen-details1.png"),
            require("../../assets/password-gen-details2.png"),
            require("../../assets/password-gen-details3.png"),
          ],
        },
      },
      {
        id: 13,
        name: "Online Portfolio/CV V1",
        type: "Full-Stack",
        shortDesc: "Online portfolio / CV website earlier version",
        technologies: [
          "Vue",
          "Vuex",
          "Tailwind",
          "FontAwesome",
          "Git",
          "Netlify",
          "Javascript",
          "CSS3",
          "HTML5",
        ],
        image: require("../../assets/portfolio.png"),
        source: "https://github.com/rogerio-romao/rogerio",
        live: "https://wonderful-keller-3363b3.netlify.app/",
        longDesc:
          "This website uses Vue as the framework with heavy use of Vuex for the state (separate modules for each component), with bespoke components for every section of the app and clear separation of concerns between data and presentation, where Tailwind is used for most CSS. Deployed on Netlify via Github integration.",
        showDetails: true,
        details: {
          head: "This online portfolio / cv is built using Vue, Vuex and Tailwind, and is deployed on Netlify with a connection to the Github repo, that automatically updates the production version when i push a commit. My intention was to build a nice looking portfolio to showcase my personal projects, built using best practices, easy to update and maintain. So this SPA has 3 simple views with very little code, and inside the views everything is modularized in components that each do one thing and the data is all coming from Vuex. There is a common header and footer to all the pages, and then Vue Router changes the main block on page navigation. There is dynamic asset loading happening when the user changes the selected project on the portfolio page, and a custom contact form that emails the user and myself on send. Featured projects cards component was built leveraging Tailwind for ease of adding new projects. The courses portion of the About page is also a component that generates the markup just by adding the data in the Vuex module.",
          images1: [
            require("../../assets/portfolio-details1.png"),
            require("../../assets/portfolio-details2.png"),
            require("../../assets/portfolio-details3.png"),
          ],
          body: "On top of the base Tailwind css classes, i have added custom css wherever needed, and am using Vue transitions and transition groups in several places to create subtle animations. In the components, I am using most of the usual Vue options API, such as computed properties, methods, props, watchers and event emitters when i need to communicate changes up and down the app hierarchy. Another nice addition is a light/dark mode which i did using css variables. In Vuex, the state is modularized, so every component that needs state gets it's own Vuex module, which the main store then imports and distributes, making it very easy to update and maintain data.",
          images2: [
            require("../../assets/portfolio-details4.png"),
            require("../../assets/portfolio-details5.png"),
            require("../../assets/portfolio-details6.png"),
          ],
        },
      },
      {
        id: 14,
        name: "The Catstagram",
        type: "Full-Stack",
        shortDesc: "A mockup of an Instagram like app",
        technologies: [
          "Vue",
          "Nuxt",
          "Vuetify",
          "Axios",
          "APIs",
          "Git",
          "Netlify",
          "Javascript",
          "CSS3",
          "HTML5",
        ],
        image: require("../../assets/catstagram.png"),
        source: "https://github.com/rogerio-romao/purple-test",
        live: "https://app.netlify.com/sites/nifty-ptolemy-7b0487",
        longDesc:
          "This was done with Vue as the framework with Nuxt bootstrapping and Vuetify for the presentation. Uses async API calls via Axios.",
        showDetails: true,
        details: {
          head: "This is an example of working with: asyncronous API calls, in this case getting data for the cards with an API key and Axios, and filtering over the deeply nested result to get only the pertinent information, and then build an interface that is modern and responsive, once again using Vuetify's Material design components. It also shows dealing with authorization and form validation, using Vuelidate in this case. This is meant as just an example of how I would do that, as the app still works without actual authentication, as there is no server side code attached. The whole app was bootstrapped using Nuxt.",
          images1: [
            require("../../assets/catstagram-details1.png"),
            require("../../assets/catstagram-details2.png"),
            require("../../assets/catstagram-details3.png"),
            require("../../assets/catstagram-details4.png"),
            require("../../assets/catstagram-details5.png"),
          ],
        },
      },
      {
        id: 15,
        name: "Music Database",
        type: "Front-End",
        shortDesc: "A music database to catalogue your tracks.",
        technologies: [
          "Vue",
          "Nuxt",
          "Vuetify",
          "Git",
          "Netlify",
          "Javascript",
          "CSS3",
          "HTML5",
        ],
        image: require("../../assets/music-database.png"),
        source: "https://github.com/rogerio-romao/music-database",
        live: "https://gracious-albattani-2e9b26.netlify.app/",
        longDesc:
          "Having been a DJ, this is something I wanted to create to help me catalogue my collection. It is done using Vue's Vuex store, with the interface using the familiar Goggle Material Design specs in dark mode, courtesy of Vuetify. App build using Nuxt framework. You can add tracks, edit them and delete them, with fields for the most common properties.",
        showDetails: false,
      },
      {
        id: 16,
        name: "Coffe Shop",
        type: "Full-Stack",
        shortDesc: "A shop where you can buy coffee products.",
        technologies: [
          "Gatsby",
          "React",
          "Contentful",
          "GraphQL",
          "SnipCart",
          "Git",
          "Netlify",
          "Javascript",
          "CSS3",
          "HTML5",
        ],
        image: require("../../assets/coffee-shop.png"),
        source: "https://github.com/rogerio-romao/gatsby-coffee-project",
        live: "https://elated-wing-b66940.netlify.app/",
        longDesc:
          "This is an e-commerce website based on Gatsby and React, with a GraphQL backend, that uses the Contentful API for the content management and FormSpree for the contact form. It has continuous integration when deploying to Github via Netlify and also a webhook setup where if the user changes only the Contentful data and not the code itself, a build is triggered on Netlify. The cart is an implementation of SnipCart based on their API and Gatsby plugin.",
        showDetails: false,
      },
      {
        id: 17,
        name: "React Realtime Chat App",
        type: "Full-Stack",
        shortDesc: "A realtime chat application a la Whatsapp.",
        technologies: [
          "React",
          "Firebase",
          "Hosting",
          "Realtime Database",
          "Git",
          "Cloud Functions",
          "Javascript",
          "CSS3",
          "HTML5",
        ],
        image: require("../../assets/chat.png"),
        source: "https://github.com/rogerio-romao/react-chat-app",
        live: "https://react-chat-app-fca7d.web.app/",
        longDesc:
          "This is a React application that uses Firebase for the backend. I am using Realtime Database, Authentication via Google and Facebook, Storage, Hosting and Functions. The app is using the latest React syntax, with Hooks, including several custom hooks, for things like api calls, media queries and modal windows. Also uses the Notification api to send messages to users and RSuite UI component library.",
        showDetails: true,
        details: {
          head: "This app showcases some of today's current trends in development, including React Hooks, both built-in and custom ones, and leveraging the power of Firebase for simplifying your backend and make it simultaneously more powerful. The app sends messages in realtime to all connected users of a chat room via Realtime Database. Users authenticate via Firebase too, where 2 methods are configured, via Google or Facebook. Firebase Functions being used for sending notifications to users, and Storage for file upload, which can be sent via the chat rooms. The hosting was also done via Firebase using their CLI. React Router is being used for navigation. Hooks being used include useRef, useState, useEffect, useParams, custom ones to deal with more specific things (check source code), and useCallback in conjuction with memo to optimize components wherever possible.",
          images1: [
            require("../../assets/chat-details1.png"),
            require("../../assets/chat-details2.png"),
            require("../../assets/chat-details3.png"),
            require("../../assets/chat-details4.png"),
            require("../../assets/chat-details5.png"),
          ],
          body: "There are a variety of modal windows for various features such as creting rooms and sending notifications. The user can change username and upload avatar picture, create rooms and adjust permissions to other users of the room such as make them admins. They can also delete their messages or like messages. Users will be asked by the browser if they want to allow notifications, which can be broadcast by a room admin to all its users. In chat files can be sent and uploaded / downloaded. Users can also record audio messages instead of text (browser will also ask for permission). The UI is super clean and uses a library i'd never used before called RSuite, specific for React, but definitely will be using again in the future! It is also responsive and looks good on any size screen.",
          images2: [
            require("../../assets/chat-details6.png"),
            require("../../assets/chat-details7.png"),
            require("../../assets/chat-details8.png"),
            require("../../assets/chat-details9.png"),
          ],
        },
      },
      {
        id: 18,
        name: "Netflix Clone",
        type: "Full-Stack",
        shortDesc: "Netflix clone using TMDB API with movie trailer previews.",
        technologies: [
          "React",
          "Firebase",
          "Hosting",
          "API",
          "Javascript",
          "CSS3",
          "HTML5",
        ],
        image: require("../../assets/netflix-clone.png"),
        source: "https://github.com/rogerio-romao/netflix-clone-react",
        live: "https://netflix-clone-f2569.web.app/",
        longDesc:
          "This is a React application that is hosted on Firebase. The front-end is done using Hooks and functional components. The data is coming from the TMDB API, and each title can be clicked on to start and stop a movie preview. This is done using a couple of npm packages.",
        showDetails: false,
      },
      {
        id: 19,
        name: "Idle DJ Game - Vue.js",
        type: "Front-End",
        shortDesc: "Idle / clicker game made with Vue and Vuex.",
        technologies: ["Vue", "Vuex", "Netlify", "Javascript", "CSS3", "HTML5"],
        image: require("../../assets/idle-dj.png"),
        source: "https://github.com/rogerio-romao/idle_dj",
        live: "https://silly-lamport-fbfed0.netlify.app/",
        longDesc:
          "Still a work in progress, the idea here, more than making something fun to play or with fancy graphics (maybe in the future), was to experiment and learn using Vuex to the full capacity, since there is a tremendous amount of state and inter-dependencies between all the parts of the game. So there is extensive use of modules and a big number of actions and mutations, such as you would have on a real world project.",
        showDetails: true,
        details: {
          head: "I wanted to do something that was simultaneously fun and related to my interests, but also a big challenge. Conceptualizing an architecture that would allow for very complex and inter-dependent state interactions, keeping all the state and UI in sync. I chose Vue and Vuex, a combination i quite like, with the approach to use all of Vuex's capabilities, namely using a module architecture to simplify the state management. There is a large amount of actions and mutations, with a lot of computed properties, watchers and components, with comunication between these being done with props passed down and emitters sending data back up to the parent.",
          images1: [
            require("../../assets/idle-dj-details1.png"),
            require("../../assets/idle-dj-details2.png"),
            require("../../assets/idle-dj-details3.png"),
            require("../../assets/idle-dj-details4.png"),
          ],
          body: "Styling has been done using Sass with the .sass syntax, taking advantage of the variables, nesting and clean looking syntax, and the layout uses a mixture of CSS Grid and Flex, with responsive media queries to adjust to different sizes. Created a custom icons component for the multiple icons on the UI. There is only a single page view consisting of multi nested components. The complexity is in all the interactions, since almost all modules interact with each other, with a lot of data flows and state changes constantly happening. This is still a work in progress, I intend to refactor and optimize heavily after all the features are fully coded.",
          images2: [
            require("../../assets/idle-dj-details5.png"),
            require("../../assets/idle-dj-details6.png"),
            require("../../assets/idle-dj-details7.png"),
            require("../../assets/idle-dj-details8.png"),
          ],
        },
      },
      {
        id: 20,
        name: "Portfolio V2",
        type: "Front-End",
        shortDesc: "My new portfolio, new design using Vue3 and Quasar.",
        technologies: [
          "Vue3",
          "Vuex",
          "Quasar",
          "Vercel",
          "Javascript",
          "CSS3",
          "HTML5",
          "Gsap",
        ],
        image: require("../../assets/portfoliov2.png"),
        source: "#",
        live: "#",
        longDesc:
          "My 2.0 portfolio. First time exploring the Quasar UI library. It is Vue3 based, using the composition API and the new script setup syntax, with Vuex handling the data. Went for a streamlined look, and ease of use when editing. Mobile responsive.",
        showDetails: true,
        details: {
          head: "For the most part, the biggest lessons from this build were how to use the Quasar UI Framework, which is a opinionated, feature packed library for use with Vu3, and using the composition API from Vue3. It is deployed on Vercel with webhooks on GitHub to automatically deploy changes to the website. The UI is very clean and easy to use, and the code is very readable and easy to understand. The UI is also responsive, and looks great on any size screen. Also created a nice custom form that is connected to an email API, and sends me an email when the form is submitted, after succesfully passing the custom validation. And a accordeon component that is used in the about section, to show courses taken.",
          images1: [
            require("../../assets/portfoliov2-details1.png"),
            require("../../assets/portfoliov2-details2.png"),
            require("../../assets/portfoliov2-details3.png"),
            require("../../assets/portfoliov2-details4.png"),
            require("../../assets/portfoliov2-details5.png"),
          ],
          body: "I tried to pay a lot of attention to detail. Examples of that include the 'elastic' animation on hover on the cards in the featured page, done with plain CSS animation and keyframes; the transitions between pages with a slight fade-out, that is setup via vue transitions at the vue router level, the auto-hiding of the sidebar on the portfolio page and obviously the landing page which is a full blown programmatic animation using the amazing Gsap library.",
        },
      },
      {
        id: 21,
        name: "Huddle Website",
        type: "Front-End",
        shortDesc:
          "Frontend Mentor challenge website, with curved sections and responsive layout.",
        technologies: ["Javascript", "CSS3", "HTML5"],
        image: require("../../assets/huddle.png"),
        source: "https://github.com/rogerio-romao/huddle-landing-page",
        live: "https://rogerio-romao.github.io/huddle-landing-page/",
        longDesc:
          "The Frontend Mentor website gives you a full project design image, and you have to replicate it through code, using whatever technologies you are comfortable with. This challenge was to create a landing page website that would be responsive, with some curved sections. It was fun and good practice to follow a design system and translate it to code, I think I nailed this one. First time I used Github Pages for hosting too.",
        showDetails: false,
      },
      {
        id: 22,
        name: "Color Palette Creator",
        type: "Front-End",
        shortDesc: "Create color schemes and export them to use on your app.",
        technologies: [
          "Javascript",
          "CSS3",
          "HTML5",
          "Vue3",
          "Vuex",
          "Firebase",
          "Authentication",
        ],
        image: require("../../assets/palette.png"),
        source: "https://github.com/rogerio-romao/pallete-creator",
        live: "https://palette-creator.surge.sh/",
        longDesc:
          "This uses Vue3 and Vuex. It allows you to create color schemes and export them as CSS to use on your app. You set a main color, and it generates a bunch of variations of that color based on color theory. You can then pick variations and edit them to create a new color scheme, or have the app generate a random scheme for you with those variations. You can login and save your color schemes to your account.",
        showDetails: false,
      },
      {
        id: 23,
        name: "Tchef - NPM package",
        type: "Back-End",
        shortDesc:
          "A NPM package that wraps the fetch API, and adds lots of useful features.",
        technologies: [
          "Typescript",
          "ESBuild",
          "NPM",
          "JSR",
          "Javascript",
          "ESLint",
          "Vitest",
        ],
        image: require("../../assets/tchef.png"),
        source: "https://github.com/rogerio-romao/tchef",
        live: "https://www.npmjs.com/package/tchef",
        longDesc:
          "This is a NPM package that wraps the fetch API, and adds lots of useful features. It adds result type returns, so no more try-catch, typed responses, and retries among other things. These are features that I found myself writing over and over again, so I decided to make a package out of it. It is written in Typescript, and has a full test suite.",
        showDetails: true,
        details: {
          head: "I have made it for my own personal use, because at my work I am constantly writing fetch functions to grab data, and it got tiresome to do try-catch blocks all the time, and having to check for errors even in the try block. I also wanted the ability to have retries in case of error and to type the responses, so this package is the result of that. It is written in Typescript, and has a full Vitest test suite, and is linted with ESLint with my own custom rules preset. It is also built with ESBuild, which is a very fast bundler. The package is published on NPM and JSR, and you can install it with npm install tchef. It works on the browser and on Node, Deno, Bun, Cloudflare Works.",
          images1: [
            require("../../assets/tchef-details1.png"),
            require("../../assets/tchef-details2.png"),
            require("../../assets/tchef-details3.png"),
          ],
          body: "Tchef returns a result object with the data, status, and error, so you can check for errors in the catch block, and the data is always in the data property. It also has a retry feature, where you can set the number of retries and the delay between them. It also has a timeout feature, where you can set the time in milliseconds to wait for a response before timing out. It also has a typed response, where you can set the type of the response, and it will return the data in that type. It also has a custom headers feature, where you can set the headers you want to send with the request. There is also a retries feature, where you can set the number of retries and the delay between them. It's also possible to use Valibot, a validation library, to validate the response data. The package exports its types and JSDocs, so you get full intellisense in your editor.",
        },
      },
      {
        id: 24,
        name: "Typescript Backend Starter",
        type: "Back-End",
        shortDesc: "My Typescript backend starter template.",
        technologies: [
          "Typescript",
          "ESBuild",
          "ESLint",
          "Vitest",
          "Node",
          "Github",
        ],
        image: require("../../assets/typescript.png"),
        source: "https://github.com/rogerio-romao/typescript-backend-starter",
        live: "https://github.com/rogerio-romao/typescript-backend-starter",
        longDesc:
          "Boilerplate code takes an imense amount of time, and it's easy to forget important things. I built this template to be a starting point for my backend projects at work. It uses Typescript, bundling via ESBuild, my own custom ESLint preset, test ready with Vitest, CI enabled and Consola for logging. Using the new watch mode in Node, and setup as a template in Github, it's easy to get started with a new project.",
        showDetails: false,
      },
      {
        id: 25,
        name: "Davidoff US Store Locator",
        type: "Full-Stack",
        shortDesc: "A store locator for the Davidoff brand's US webstore.",
        technologies: [
          "Nextjs 14",
          "Geolocation",
          "Google Maps API",
          "Supabase",
          "Javascript",
          "CSS3",
          "HTML5",
        ],
        image: require("../../assets/davidoff-store-locator.png"),
        source: "#",
        live: "https://us.davidoffgeneva.com/store-locator",
        longDesc:
          "This is the store locator for the Davidoff brand's US webstore. I coded both the backend and frontend. It uses Nextjs 14 with the App Router, and the Geolocation API to get the user's location, and the Google Maps API to show the stores. It is responsive and works on any device. Data is stored in Supabase. Search works by inputting a city or zip code, then calculating the distance to the stores and showing the closest ones first.",
        showDetails: true,
        details: {
          head: "Notable features are: accessibility, with things like autofocus on search, and pressing Enter to submit. You can use the text input or the geolocation button to get the user's location. If using the text input, we use the Google Maps API to get the coordinates of the city or zip code. We then call Supabase to get all the stores, and we calculate distances locally with our own function. This makes it extremely fast. We then sort the stores by distance and show a card with information for each.",
          images1: [
            require("../../assets/davidoff-store-locator-details1.png"),
            require("../../assets/davidoff-store-locator-details2.png"),
          ],
          body: "You can then filter the results by type of store. If you are logged in, you also have the ability to save your preferred store to your account. There is on each card a Show on Map button that will take you to Google Maps with the directions to that store from your location. All the css and layout is custom css, using css modules. Also pagination is built from scratch with no dependencies.",
        },
      },
    ],
  };
}
